// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mockspost/repository.go -package=mockspost
//
// Package mockspost is a generated GoMock package.
package mockspost

import (
	context "context"
	reflect "reflect"
	time "time"

	post "github.com/wisesight/test-container-example/internal/services/post"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindByDateTime mocks base method.
func (m *MockRepository) FindByDateTime(ctx context.Context, dateTime time.Time) ([]*post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByDateTime", ctx, dateTime)
	ret0, _ := ret[0].([]*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByDateTime indicates an expected call of FindByDateTime.
func (mr *MockRepositoryMockRecorder) FindByDateTime(ctx, dateTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByDateTime", reflect.TypeOf((*MockRepository)(nil).FindByDateTime), ctx, dateTime)
}

// FindByID mocks base method.
func (m *MockRepository) FindByID(ctx context.Context, id string) (*post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockRepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockRepository)(nil).FindByID), ctx, id)
}

// New mocks base method.
func (m *MockRepository) New(ctx context.Context, post *post.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", ctx, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockRepositoryMockRecorder) New(ctx, post any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockRepository)(nil).New), ctx, post)
}
